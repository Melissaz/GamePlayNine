{"version":3,"sources":["background.jpg","Game.js","Rules.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","possibleCombinationSum","arr","n","indexOf","length","pop","listSize","combinationsCount","i","combinationSum","j","Stars","props","stars","numberOfStars","push","react_default","a","createElement","key","className","Button","button","answerIsCorrect","onClick","acceptAnswer","checkAnswer","disabled","selectedNumbers","redraw","redrawNumber","Answer","map","number","unselectNumber","Numbers","arrayOfNumber","usedNumbers","numberClassName","selectNumber","DoneFrame","doneStatus","resetGame","Game","state","initialState","_this","setState","clickedNumber","preState","concat","filter","reduce","acc","randomNumber","updateDoneStatus","possibleSolutions","_ref","possibleNumbers","_this$state","this","Game_Stars","Game_Button","Game_Answer","Game_DoneFrame","Game_Numbers","Component","Math","floor","random","Rules","Fragment","sectionStyle","backgroundImage","background","backgroundPosition","backgroundSize","App","document","title","style","src_Game_0","src_Rules","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sHAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0OCKpCC,wBAAyB,SAAzBA,EAAkCC,EAAKC,GACvC,GAAID,EAAIE,QAAQD,IAAM,EAAK,OAAO,EAClC,GAAID,EAAI,GAAKC,EAAK,OAAO,EACzB,GAAID,EAAIA,EAAIG,OAAS,GAAKF,EAExB,OADAD,EAAII,MACGL,EAAuBC,EAAKC,GAGrC,IADA,IAAII,EAAWL,EAAIG,OAAQG,EAAqB,GAAKD,EAC5CE,EAAI,EAAGA,EAAID,EAAoBC,IAAM,CAE5C,IADA,IAAIC,EAAiB,EACZC,EAAE,EAAIA,EAAIJ,EAAWI,IACxBF,EAAK,GAAKE,IAAMD,GAAkBR,EAAIS,IAE5C,GAAIR,IAAMO,EAAkB,OAAO,EAErC,OAAO,IAGLE,EAAQ,SAACC,GAEX,IADA,IAAIC,EAAM,GACDL,EAAE,EAAGA,EAAII,EAAME,cAAeN,IACnCK,EAAME,KAAKC,EAAAC,EAAAC,cAAA,KAAGC,IAAKX,EAAGY,UAAU,gBAEpC,OACIJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACVP,IAKPQ,EAAS,SAACT,GACZ,IAAIU,EACJ,OAAOV,EAAMW,iBACT,KAAK,EACLD,EACAN,EAAAC,EAAAC,cAAA,UAAQE,UAAU,kBAAkBI,QAASZ,EAAMa,cACnDT,EAAAC,EAAAC,cAAA,KAAGE,UAAU,iBAET,MACJ,KAAK,EACLE,EACAN,EAAAC,EAAAC,cAAA,UAAQE,UAAU,kBAClBJ,EAAAC,EAAAC,cAAA,KAAGE,UAAU,iBAET,MACJ,QACAE,EACAN,EAAAC,EAAAC,cAAA,UAAQE,UAAU,eAClBI,QAASZ,EAAMc,YACfC,SAA0C,IAAhCf,EAAMgB,gBAAgBxB,QAFhC,KAOJ,OACIY,EAAAC,EAAAC,cAAA,OAAKE,UAAU,qBACVE,EACDN,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQE,UAAU,yBAAyBI,QAASZ,EAAMiB,OAAQF,SAAmC,IAAvBf,EAAMkB,cAChFd,EAAAC,EAAAC,cAAA,KAAGE,UAAU,kBAAsBR,EAAMkB,gBAMnDC,EAAS,SAACnB,GACZ,OACII,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACdR,EAAMgB,gBAAgBI,IAAI,SAACC,EAAQzB,GAAT,OACvBQ,EAAAC,EAAAC,cAAA,QAAMC,IAAKX,EAAGgB,QAAS,kBAAMZ,EAAMsB,eAAeD,KAAUA,OAOlEE,EAAU,SAACvB,GASb,OACII,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iCACXJ,EAAAC,EAAAC,cAAA,WACKkB,EAAcJ,IAAI,SAACC,EAAQzB,GAAT,OACfQ,EAAAC,EAAAC,cAAA,QAAMC,IAAKX,EAAGY,UAZN,SAACa,GACrB,OAAGrB,EAAMyB,YAAYlC,QAAQ8B,IAAS,EAC3B,eAERrB,EAAMgB,gBAAgBzB,QAAQ8B,IAAS,EAChC,wBADV,EAQqCK,CAAgBL,GACzCT,QAAW,WAAMZ,EAAM2B,aAAaN,KAAWA,QAO7DG,EAAgB,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAEjCI,EAAY,SAAC5B,GACf,OACII,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eAEXJ,EAAAC,EAAAC,cAAA,UAAKN,EAAM6B,YACXzB,EAAAC,EAAAC,cAAA,UAAQE,UAAU,oBAAoBI,QAASZ,EAAM8B,WAArD,gBAKNC,6MAUFC,MAAQD,EAAKE,iBAEbH,UAAY,kBAAMI,EAAKC,SAASJ,EAAKE,mBAErCN,aAAe,SAACS,GACRF,EAAKF,MAAMhB,gBAAgBzB,QAAQ6C,IAAgB,GAAKF,EAAKF,MAAMP,YAAYlC,QAAQ6C,IAAgB,GAC3GF,EAAKC,SAAS,SAAAE,GAAQ,MAAK,CACvBrB,gBAAiBqB,EAASrB,gBAAgBsB,OAAOF,GACjDzB,gBAAiB,WAGzBW,eAAiB,SAACc,GACdF,EAAKC,SAAS,SAAAE,GAAQ,MAAK,CACvBrB,gBAAiBqB,EAASrB,gBAAgBuB,OAAO,SAAAlB,GAAM,OAAIA,IAAWe,IACtEzB,gBAAiB,WAGzBG,YAAc,WAEVoB,EAAKC,SAAS,SAAAE,GAAQ,MAAI,CACtB1B,gBAAiB0B,EAASnC,gBAAkBmC,EAASrB,gBAAgBwB,OAAO,SAACC,EAAInD,GAAL,OAAUmD,EAAInD,GAAG,SAGrGuB,aAAe,WAEXqB,EAAKC,SAAS,SAAAE,GAAQ,MAAK,CACvBZ,YAAaY,EAASZ,YAAYa,OAAOD,EAASrB,iBAClDA,gBAAgB,GAChBL,gBAAiB,KACjBT,cAAe6B,EAAKW,iBACpBR,EAAKS,qBAGb1B,OAAS,WAC2B,IAA5BiB,EAAKF,MAAMd,cACfgB,EAAKC,SAAS,SAAAE,GAAQ,MAAI,CAC1BrB,gBAAgB,GAChBd,cAAe6B,EAAKW,eACpB/B,gBAAiB,KACjBO,aAAcmB,EAASnB,aAAc,IACjCgB,EAAKS,qBAGbC,kBAAoB,SAAAC,GAAkC,IAAhC3C,EAAgC2C,EAAhC3C,cAAeuB,EAAiBoB,EAAjBpB,YAC3BqB,EAAkBtB,EAAce,OAAO,SAAAlB,GAAM,OACd,IAAjCI,EAAYlC,QAAQ8B,KAIvB,OAAOjC,EAAuB0D,EAAiB5C,MAIpDyC,iBAAmB,WACfT,EAAKC,SAAS,SAAAE,GACV,OAAmC,IAAhCA,EAASZ,YAAYjC,OACb,CAAEqC,WAAY,eAGK,IAA1BQ,EAASnB,cAAuBgB,EAAKU,kBAAkBP,QAA3D,EACU,CAAER,WAAY,0FAQzB,IAAAkB,EAC4FC,KAAKhB,MAA/FhB,EADF+B,EACE/B,gBAAiBd,EADnB6C,EACmB7C,cAAeS,EADlCoC,EACkCpC,gBAAiBc,EADnDsB,EACmDtB,YAAaP,EADhE6B,EACgE7B,aAAcW,EAD9EkB,EAC8ElB,WACrF,OACEzB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACbJ,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAAC2C,EAAD,CAAO/C,cAAeA,IACtBE,EAAAC,EAAAC,cAAC4C,EAAD,CAAQlC,gBAAiBA,EACjBF,YAAakC,KAAKlC,YAClBH,gBAAiBA,EACjBE,aAAcmC,KAAKnC,aACnBI,OAAQ+B,KAAK/B,OACbC,aAAcA,IACtBd,EAAAC,EAAAC,cAAC6C,EAAD,CAAQnC,gBAAiBA,EACjBM,eAAgB0B,KAAK1B,mBAIrClB,EAAAC,EAAAC,cAAA,WACCuB,EACDzB,EAAAC,EAAAC,cAAC8C,EAAD,CAAWvB,WAAYA,EAAaC,UAAWkB,KAAKlB,YACpD1B,EAAAC,EAAAC,cAAC+C,EAAD,CAASrC,gBAAiBA,EAClBW,aAAcqB,KAAKrB,aACnBF,YAAaA,IAErBrB,EAAAC,EAAAC,cAAA,mBAxGWgD,aAAbvB,EACKW,aAAc,kBAAM,EAAIa,KAAKC,MAAoB,EAAdD,KAAKE,WAD7C1B,EAEKE,aAAe,iBAAM,CACxBjB,gBAAgB,GAChBd,cAAe6B,EAAKW,eACpBjB,YAAa,GACbd,gBAAiB,KACjBO,aAAc,EACdW,WAAY,OAuGLE,QCrMA2B,mLAtBP,OACItD,EAAAC,EAAAC,cAACF,EAAAC,EAAMsD,SAAP,KACIvD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,aACXJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,eACXJ,EAAAC,EAAAC,cAAA,oBAEJF,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBAAf,kgBARA8C,qBCChBM,EAAe,CACjBC,gBAAe,OAAAvB,cAASwB,EAAT,KACfC,mBAAoB,SACpBC,eAAgB,SAmBHC,8LAZXC,SAASC,MAAQ,iDAGjB,OACE/D,EAAAC,EAAAC,cAAA,OAAKE,UAAU,gBAAgB4D,MAAOR,GACpCxD,EAAAC,EAAAC,cAAC+D,EAAD,MACAjE,EAAAC,EAAAC,cAACgE,EAAD,cARUhB,aCFEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzE,EAAAC,EAAAC,cAACwE,EAAD,MAASZ,SAASa,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ba3db312.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.3843905c.jpg\";","import React, { Component } from 'react';\r\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \r\nimport './bootstrap.min.css';\r\nimport './Game.css';\r\n\r\nvar possibleCombinationSum = function(arr, n) {\r\n    if (arr.indexOf(n) >= 0) { return true; }\r\n    if (arr[0] > n) { return false; }\r\n    if (arr[arr.length - 1] > n) {\r\n      arr.pop();\r\n      return possibleCombinationSum(arr, n);\r\n    }\r\n    var listSize = arr.length, combinationsCount = (1 << listSize)\r\n    for (var i = 1; i < combinationsCount ; i++ ) {\r\n      var combinationSum = 0;\r\n      for (var j=0 ; j < listSize ; j++) {\r\n        if (i & (1 << j)) { combinationSum += arr[j]; }\r\n      }\r\n      if (n === combinationSum) { return true; }\r\n    }\r\n    return false;\r\n  };\r\n\r\nconst Stars = (props) => {\r\n    let stars=[];\r\n    for (let i=0; i < props.numberOfStars; i++){\r\n        stars.push(<i key={i} className=\"fa fa-star\"></i>)\r\n    }\r\n    return(\r\n        <div className=\"col-5\">\r\n            {stars}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Button = (props) => {\r\n    let button;\r\n    switch(props.answerIsCorrect){\r\n        case true:\r\n        button =\r\n        <button className=\"btn btn-success\" onClick={props.acceptAnswer}>\r\n        <i className=\"fa fa-check\"></i>\r\n        </button>;\r\n            break;\r\n        case false:\r\n        button =\r\n        <button className=\"btn btn-danger\" >\r\n        <i className=\"fa fa-times\"></i>\r\n        </button>;\r\n            break;\r\n        default:\r\n        button =\r\n        <button className=\"btn btn-dark\" \r\n        onClick={props.checkAnswer}\r\n        disabled={props.selectedNumbers.length ===0 }>\r\n        =\r\n        </button>;\r\n            break;\r\n    }\r\n    return(\r\n        <div className=\"col-2 text-center\">\r\n            {button}\r\n            <br />\r\n            <br />\r\n            <button className=\"btn btn-warning btn-sm\" onClick={props.redraw} disabled = {props.redrawNumber === 0}>\r\n                <i className=\"fa fa-refresh\" ></i>{props.redrawNumber}\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Answer = (props) => {\r\n    return(\r\n        <div className=\"col-5\">\r\n        {props.selectedNumbers.map((number, i)=>\r\n            <span key={i} onClick={() => props.unselectNumber(number)}>{number}</span>\r\n        )}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Numbers = (props) => {\r\n    const numberClassName = (number) => {\r\n        if(props.usedNumbers.indexOf(number)>=0){\r\n            return 'numbers-used';\r\n        }\r\n        if(props.selectedNumbers.indexOf(number)>=0){\r\n           return 'numbers-selected'; \r\n        }\r\n    };\r\n    return(\r\n        <div className=\"card bg-secondary text-center\">\r\n            <div>\r\n                {arrayOfNumber.map((number, i ) => \r\n                    <span key={i} className={numberClassName(number)} \r\n                    onClick = {()=> {props.selectNumber(number)}}>{number}</span>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nconst arrayOfNumber = [1,2,3,4,5,6,7,8,9];\r\n\r\nconst DoneFrame = (props) =>{\r\n    return(\r\n        <div className=\"text-center\">\r\n        \r\n            <h2>{props.doneStatus}</h2>\r\n            <button className=\"btn btn-secondary\" onClick={props.resetGame}>Play Again</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nclass Game extends Component {\r\n    static randomNumber= () => 1 + Math.floor(Math.random()*9);\r\n    static initialState = ()=> ({\r\n        selectedNumbers:[],\r\n        numberOfStars: Game.randomNumber(),\r\n        usedNumbers: [ ],\r\n        answerIsCorrect: null,\r\n        redrawNumber: 5,\r\n        doneStatus: null,\r\n    });\r\n    state = Game.initialState();\r\n\r\n    resetGame = () => this.setState(Game.initialState());\r\n    \r\n    selectNumber = (clickedNumber) => {\r\n        if (this.state.selectedNumbers.indexOf(clickedNumber)>=0 || this.state.usedNumbers.indexOf(clickedNumber)>=0){return;}\r\n        this.setState(preState => ({\r\n            selectedNumbers: preState.selectedNumbers.concat(clickedNumber),\r\n            answerIsCorrect: null\r\n        }));\r\n    };\r\n    unselectNumber = (clickedNumber) =>{\r\n        this.setState(preState => ({\r\n            selectedNumbers: preState.selectedNumbers.filter(number => number !== clickedNumber),\r\n            answerIsCorrect: null\r\n        }));\r\n    };\r\n    checkAnswer = ()=>{\r\n        //check is answer = numbers\r\n        this.setState(preState =>({\r\n            answerIsCorrect: preState.numberOfStars === preState.selectedNumbers.reduce((acc,n)=> acc+n, 0)\r\n        }));\r\n    };\r\n    acceptAnswer = ()=>{\r\n        // mark the accepted answer numbers as used\r\n        this.setState(preState => ({\r\n            usedNumbers: preState.usedNumbers.concat(preState.selectedNumbers),\r\n            selectedNumbers:[],\r\n            answerIsCorrect: null,\r\n            numberOfStars: Game.randomNumber(),\r\n        }), this.updateDoneStatus); //call function updateDoneStatus\r\n    };\r\n\r\n    redraw = () =>{\r\n        if (this.state.redrawNumber === 0) {return;}\r\n        this.setState(preState =>({\r\n        selectedNumbers:[],\r\n        numberOfStars: Game.randomNumber(),\r\n        answerIsCorrect: null,\r\n        redrawNumber: preState.redrawNumber -1\r\n        }), this.updateDoneStatus);//call function updateDoneStatus\r\n    }\r\n\r\n    possibleSolutions = ({numberOfStars, usedNumbers})  =>{\r\n        const possibleNumbers = arrayOfNumber.filter(number =>\r\n            usedNumbers.indexOf(number) === -1\r\n        );\r\n\r\n        //possibleNumbers compare with numberofStars\r\n         return possibleCombinationSum(possibleNumbers, numberOfStars);\r\n        \r\n    };\r\n    \r\n    updateDoneStatus = () => {\r\n        this.setState(preState => {\r\n            if(preState.usedNumbers.length === 9){\r\n                return { doneStatus: 'Done. Nice!'};\r\n            }\r\n\r\n            if (preState.redrawNumber === 0 && !this.possibleSolutions(preState)){\r\n                return{ doneStatus: 'Game Over! '};\r\n            }\r\n        });\r\n        \r\n    };\r\n\r\n        \r\n\r\n  render() {\r\n      const {selectedNumbers, numberOfStars, answerIsCorrect, usedNumbers, redrawNumber, doneStatus} = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Play Nine</h1>\r\n        <div className=\"gamecontent\">\r\n            <div className=\"row\">\r\n                <Stars numberOfStars={numberOfStars}/>\r\n                <Button selectedNumbers={selectedNumbers}\r\n                        checkAnswer={this.checkAnswer}\r\n                        answerIsCorrect={answerIsCorrect} \r\n                        acceptAnswer={this.acceptAnswer} \r\n                        redraw={this.redraw} \r\n                        redrawNumber={redrawNumber}/>\r\n                <Answer selectedNumbers={selectedNumbers} \r\n                        unselectNumber={this.unselectNumber} />\r\n            </div>\r\n        </div>\r\n        \r\n        <br />\r\n        {doneStatus ? \r\n        <DoneFrame doneStatus={doneStatus}  resetGame={this.resetGame} />:\r\n        <Numbers selectedNumbers={selectedNumbers}\r\n                selectNumber={this.selectNumber} \r\n                usedNumbers={usedNumbers} />\r\n        }\r\n        < br/>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;","import React, { Component } from 'react';\r\nimport '../node_modules/font-awesome/css/font-awesome.min.css'; \r\nimport './bootstrap.min.css';\r\nimport './Game.css';\r\n\r\nclass Rules extends Component {\r\n    render(){\r\n        return(\r\n            <React.Fragment>\r\n                <div className=\"container\">\r\n                    <div className=\"rulesheader\">\r\n                        <h3>Rules</h3> \r\n                    </div>\r\n                    <div className=\"rulescontent\"> \r\n                        Select one or more numbers that would sum up to the value of the stars.\r\n                        Click the equal sign to see if it is right.\r\n                        If right, the button becomes green and click to countinue.\r\n                        If wrong, the button becomes red and you should pick other right numbers or click refresh if there is no possible correct combination.\r\n                        The objective is to correctly use all the numbers.\r\n                        When all the 9 numbers are used, you win.\r\n                        When there is no refresh time and no possible combination out of the remaining numbers, game over.\r\n                    </div>\r\n                 </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Rules;","import React, { Component } from 'react';\nimport './App.css';\nimport Game from './Game';\nimport Rules from './Rules';\nimport background from './background.jpg';\n\nvar sectionStyle = {\n  backgroundImage: `url(${background})`,\n  backgroundPosition: 'center',\n  backgroundSize: 'cover',\n\n\n};\n\nclass App extends Component {\n  componentDidMount(){\n    document.title = \"Game PlayNine\"\n  }\n  render() {\n    return (\n      <div className=\"gamecontainer\" style={sectionStyle}>\n        <Game />\n        <Rules />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}